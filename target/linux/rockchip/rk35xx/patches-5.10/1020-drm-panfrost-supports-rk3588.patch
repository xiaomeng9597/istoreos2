From 1e22ec66e6fea5982b128d3da984a570ed06514d Mon Sep 17 00:00:00 2001
From: Liangbin Lian <jjm2473@gmail.com>
Date: Wed, 29 Nov 2023 17:39:29 +0800
Subject: [PATCH] panfrost: support rk3588 supplies and clks

but still not working
```
[ 9.177822] panfrost fb000000.gpu: clock rate = 200000000
[ 9.177830] panfrost fb000000.gpu: bus_clock rate = 198000000
[ 9.177896] panfrost fb000000.gpu: Looking up mali-supply from device tree
[ 9.178020] panfrost fb000000.gpu: Looking up mem-supply from device tree
[ 9.188511] panfrost fb000000.gpu: gpu soft reset timed out
[ 9.188894] panfrost fb000000.gpu: Fatal error during GPU init
[ 9.188977] panfrost: probe of fb000000.gpu failed with error -110
```
---
 drivers/gpu/drm/panfrost/panfrost_device.c | 45 ++++++++++++++++++++++
 drivers/gpu/drm/panfrost/panfrost_device.h |  6 +++
 drivers/gpu/drm/panfrost/panfrost_drv.c    | 12 ++++++
 3 files changed, 63 insertions(+)

--- a/drivers/gpu/drm/panfrost/panfrost_device.c
+++ b/drivers/gpu/drm/panfrost/panfrost_device.c
@@ -42,6 +42,7 @@ static int panfrost_clk_init(struct panf
 {
 	int err;
 	unsigned long rate;
+	unsigned int i;
 
 	pfdev->clock = devm_clk_get(pfdev->dev, NULL);
 	if (IS_ERR(pfdev->clock)) {
@@ -73,6 +74,39 @@ static int panfrost_clk_init(struct panf
 			goto disable_clock;
 	}
 
+	if (pfdev->comp->ext_clks > 0) {
+		if (pfdev->comp->ext_clks > PANFROST_MAX_CLOCKS) {
+			dev_err(pfdev->dev,
+				"Ext clocks too many %d > %d\n",
+				pfdev->comp->ext_clks, PANFROST_MAX_CLOCKS);
+			err = -EINVAL;
+			goto disable_clock;
+		}
+		for (i = 0; i < pfdev->comp->ext_clks; i++) {
+			pfdev->ext_clocks[i] = devm_clk_get(pfdev->dev, pfdev->comp->clk_names[i]);
+			if (IS_ERR(pfdev->ext_clocks[i])) {
+				err = PTR_ERR(pfdev->ext_clocks[i]);
+				pfdev->ext_clocks[i] = NULL;
+				break;
+			}
+
+			err = clk_prepare_enable(pfdev->ext_clocks[i]);
+			if (err) {
+				dev_err(pfdev->dev,
+					"Failed to prepare and enable clock (%d)\n",
+					err);
+				pfdev->ext_clocks[i] = NULL;
+				break;
+			}
+		}
+		if (err == -EPROBE_DEFER) {
+			while (i > 0) {
+				clk_disable_unprepare(pfdev->ext_clocks[--i]);
+				pfdev->ext_clocks[i] = NULL;
+			}
+			goto disable_clock;
+		}
+	}
 	return 0;
 
 disable_clock:
@@ -83,6 +117,17 @@ disable_clock:
 
 static void panfrost_clk_fini(struct panfrost_device *pfdev)
 {
+	unsigned int i;
+	if (pfdev->comp->ext_clks > 0) {
+		for (i = 0; i < PANFROST_MAX_CLOCKS && i < pfdev->comp->ext_clks; i++) {
+			if (pfdev->ext_clocks[i]) {
+				clk_disable_unprepare(pfdev->ext_clocks[i]);
+				pfdev->ext_clocks[i] = NULL;
+			} else {
+				break;
+			}
+		}
+	}
 	clk_disable_unprepare(pfdev->bus_clock);
 	clk_disable_unprepare(pfdev->clock);
 }
--- a/drivers/gpu/drm/panfrost/panfrost_device.h
+++ b/drivers/gpu/drm/panfrost/panfrost_device.h
@@ -23,6 +23,7 @@ struct panfrost_perfcnt;
 
 #define NUM_JOB_SLOTS 3
 #define MAX_PM_DOMAINS 3
+#define PANFROST_MAX_CLOCKS 3
 
 struct panfrost_features {
 	u16 id;
@@ -73,6 +74,10 @@ struct panfrost_compatible {
 
 	/* Vendor implementation quirks callback */
 	void (*vendor_quirk)(struct panfrost_device *pfdev);
+
+	/* Vendor Clock count and names. */
+	int ext_clks;
+	const char * const *clk_names;
 };
 
 struct panfrost_device {
@@ -83,6 +88,7 @@ struct panfrost_device {
 	void __iomem *iomem;
 	struct clk *clock;
 	struct clk *bus_clock;
+	struct clk *ext_clocks[PANFROST_MAX_CLOCKS];
 	struct regulator_bulk_data *regulators;
 	struct reset_control *rstc;
 	/* pm_domains for devices with more than one. */
--- a/drivers/gpu/drm/panfrost/panfrost_drv.c
+++ b/drivers/gpu/drm/panfrost/panfrost_drv.c
@@ -636,6 +636,17 @@ static const struct panfrost_compatible
 	.pm_domain_names = NULL,
 };
 
+static const char * const rk3588_supplies[] = { "mali", "mem" };
+static const char * const rk3588_clks[] = { "clk_gpu_coregroup", "clk_gpu_stacks" };
+static const struct panfrost_compatible rk3588_data = {
+	.num_supplies = ARRAY_SIZE(rk3588_supplies),
+	.supply_names = rk3588_supplies,
+	.num_pm_domains = 1, /* optional */
+	.pm_domain_names = NULL,
+	.ext_clks = ARRAY_SIZE(rk3588_clks),
+	.clk_names = rk3588_clks,
+};
+
 static const struct panfrost_compatible amlogic_data = {
 	.num_supplies = ARRAY_SIZE(default_supplies),
 	.supply_names = default_supplies,
@@ -648,6 +659,7 @@ static const struct of_device_id dt_matc
 	  .data = &amlogic_data, },
 	{ .compatible = "amlogic,meson-g12a-mali",
 	  .data = &amlogic_data, },
+	{ .compatible = "rockchip,rk3588-mali", .data = &rk3588_data, },
 	{ .compatible = "arm,mali-t604", .data = &default_data, },
 	{ .compatible = "arm,mali-t624", .data = &default_data, },
 	{ .compatible = "arm,mali-t628", .data = &default_data, },
